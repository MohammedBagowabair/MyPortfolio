<div class="header">
    <!-- Logo -->
    <a href="/">
        <img src="images/profile/logoface.png" style="max-width: 100px; height: 70px;" />
    </a>

    <!-- Hamburger Menu for Mobile -->
    <button class="hamburger" @onclick="ToggleMenu">
        <span></span>
        <span></span>
        <span></span>
    </button>

    <!-- Navigation Menu for Web -->
    <nav class="nav-menu web-nav">
        <NavLink href="/">About</NavLink>
        <NavLink href="#skills">Skills</NavLink>
        <NavLink href="#projects">Projects</NavLink>
        <NavLink href="#services">Services</NavLink>
        <NavLink href="#Education&Certifications">Education & Certifications</NavLink>
        <NavLink href="#resume">Resume</NavLink>
    </nav>

    <!-- Navigation Menu for Mobile -->
    <nav class="nav-menu mobile-nav" style="@(isMenuOpen ? "display: flex;" : "display: none;")">
        <NavLink href="/">About</NavLink>
        <NavLink href="#skills">Skills</NavLink>
        <NavLink href="#projects">Projects</NavLink>
        <NavLink href="#services">Services</NavLink>
        <NavLink href="#Education&Certifications">Education & Certifications</NavLink>
        <NavLink href="#resume">Resume</NavLink>
        <div class="hire-me-button">
            <RadzenButton Text="Hire me!" class="bubble-button" />
        </div>
    </nav>

    <!-- Hire Me Button (visible only on web version) -->
    <div class="hire-me-button web-only">
        <RadzenButton Text="Hire me!" class="bubble-button" />
    </div>


<style>
    /* Hide by default */
.web-only {
    display: none;
}

/* Show only on larger screens (e.g., tablets and desktops) */
@@media screen and (min-width: 768px) {
    .web-only {
        display: block;
    }
}

    /* Header Styling */
    .header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.5rem 1.5rem;
        background-color: #ffffff;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        position: sticky;
        top: 0;
        z-index: 1000;
        height: 70px;
    }

    /* Navigation Menu Styling */
    .nav-menu {
        display: flex;
        gap: 1.2rem;
        align-items: center;
    }

        .nav-menu a {
            color: #333;
            text-decoration: none;
            padding: 0.3rem 0.8rem;
            transition: color 0.3s, background-color 0.3s;
            font-family: 'Segoe UI', sans-serif;
            font-weight: 500;
            font-size: 0.9rem;
        }

            .nav-menu a:hover {
                color: #555;
                background-color: #f0f0f0;
                border-radius: 4px;
            }

    /* Hamburger Menu Styling */
    .hamburger {
        display: none;
        flex-direction: column;
        gap: 5px;
        background: none;
        border: none;
        cursor: pointer;
    }

        .hamburger span {
            width: 25px;
            height: 3px;
            background-color: #333;
            transition: transform 0.3s ease;
        }

    /* Responsive Styles */
    @@media (max-width: 768px) {
        .hamburger {
            display: flex;
        }

        .web-nav {
            display: none;
        }

        .mobile-nav {
            display: none;
            flex-direction: column;
            position: absolute;
            top: 70px;
            left: 0;
            width: 100%;
            background-color: white;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            padding: 1rem 0;
        }

            .mobile-nav a {
                padding: 0.8rem 1rem;
            }
    }

    @@media (min-width: 769px) {
        .mobile-nav {
            display: none;
        }

        .web-nav {
            display: flex;
        }
    }
</style>
</div>
@code {
    private bool isMenuOpen = false;
    private int windowWidth = 0;

    [Inject] private IJSRuntime JSRuntime { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Get initial screen size
        windowWidth = await JSRuntime.InvokeAsync<int>("getWindowWidth");
        isMenuOpen = false;
    }

    private void ToggleMenu()
    {
        isMenuOpen = !isMenuOpen;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("registerResizeCallback", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public async Task OnResize()
    {
        int newWidth = await JSRuntime.InvokeAsync<int>("getWindowWidth");

        if (newWidth > 768 && isMenuOpen)
        {
            isMenuOpen = false;
            StateHasChanged(); // Update UI
        }
    }
}

@* <script>
    window.getWindowWidth = () => {
        return window.innerWidth;
    };

    window.registerResizeCallback = (dotNetHelper) => {
        window.addEventListener("resize", () => {
            dotNetHelper.invokeMethodAsync("OnResize");
        });
    };

</script> *@

@*  <div class="header">
    <!-- Logo -->
    <a href="/">
        <img src="images/profile/logoface.png" style="max-width: 100px; height: 70px;" />
    </a>

    <!-- Hamburger Menu for Mobile -->
    <button class="hamburger" @onclick="ToggleMenu">
        <span></span>
        <span></span>
        <span></span>
    </button>

    <!-- Navigation Menu -->
    <nav class="nav-menu" style="@(isMenuOpen ? "display: flex;" : "display: none;")">
        <NavLink href="/">About</NavLink>
        <NavLink href="#skills">Skills</NavLink>
        <NavLink href="#projects">Projects</NavLink>
        <NavLink href="#services">Services</NavLink>
        <NavLink href="#Education&Certifications">Education & Certifications</NavLink>
        <NavLink href="#resume">Resume</NavLink>
    </nav>

    <!-- Hire Me Button -->
    <!-- Hire Me Button -->
    <div class="hire-me-button">
        <RadzenButton Text="Hire me!" class="bubble-button" />
    </div>

    <style>
        /* Bubble Button Styling */
        .bubble-button {
            font-size: 1rem;
            font-weight: bold;
            padding: 12px 24px;
            border: none;
            border-radius: 30px; /* Rounded edges for bubble effect */
            background: linear-gradient(45deg, #6C63FF, #FF6584); /* Gradient background */
            color: white; /* White text */
            cursor: pointer;
            position: relative;
            overflow: hidden;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            box-shadow: 0 4px 15px rgba(108, 99, 255, 0.3); /* Soft shadow */
        }

            .bubble-button::before {
                content: '';
                position: absolute;
                top: 50%;
                left: 50%;
                width: 300%;
                height: 300%;
                background: radial-gradient(circle, rgba(255, 255, 255, 0.3), rgba(255, 255, 255, 0) 70%); /* Bubble effect */
                transform: translate(-50%, -50%) scale(0);
                transition: transform 0.5s ease;
                border-radius: 50%;
            }

            .bubble-button:hover {
                transform: scale(1.05); /* Slightly enlarge on hover */
                box-shadow: 0 8px 25px rgba(108, 99, 255, 0.5); /* Stronger shadow on hover */
            }

            .bubble-button:active::before {
                transform: translate(-50%, -50%) scale(1); /* Bubble effect on click */
                opacity: 0;
                transition: transform 0.5s ease, opacity 0.5s ease;
            }

            .bubble-button:focus {
                outline: none; /* Remove default focus outline */
            }
    </style>
</div>

<style>

    /* Header Styling */
    .header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.5rem 1.5rem;
        background-color: #ffffff; /* White background */
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        position: sticky;
        top: 0;
        z-index: 1000;
        height: 70px;
    }

    /* Logo Styling */
    .logo a {
        color: #333;
        text-decoration: none;
        font-size: 1.2rem;
        font-weight: bold;
        font-family: 'Segoe UI', sans-serif;
    }

    /* Navigation Menu Styling */
    .nav-menu {
        display: flex;
        gap: 1.2rem;
        align-items: center;
    }

        .nav-menu a {
            color: #333; /* Dark gray text */
            text-decoration: none;
            padding: 0.3rem 0.8rem;
            transition: color 0.3s, background-color 0.3s;
            font-family: 'Segoe UI', sans-serif;
            font-weight: 500;
            font-size: 0.9rem;
        }

            .nav-menu a:hover {
                color: #555; /* Slightly darker gray on hover */
                background-color: #f0f0f0; /* Light gray background on hover */
                border-radius: 4px;
            }

    /* Hire Me Button Styling */
    .hire-me-button {
        display: flex;
        align-items: center;
    }

    /* Hamburger Menu Styling */
    .hamburger {
        display: none; /* Hidden by default */
        flex-direction: column;
        gap: 5px;
        background: none;
        border: none;
        cursor: pointer;
    }

        .hamburger span {
            width: 25px;
            height: 3px;
            background-color: #333; /* Dark gray lines */
            transition: transform 0.3s ease;
        }

    /* Responsive Styles */
    @@media (max-width: 768px) {
        .hamburger {
            display: flex; /* Show hamburger menu on small screens */
        }

        .nav-menu {
            display: none; /* Hide nav menu by default on small screens */
            flex-direction: column;
            position: absolute;
            top: 70px; /* Align below the header */
            left: 0;
            width: 100%;
            background-color: white;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            padding: 1rem 0;
        }

            .nav-menu a {
                padding: 0.8rem 1rem; /* Larger padding for mobile */
            }

        .hire-me-button {
            display: none; /* Hide "Hire Me" button on small screens */
        }
    }
</style>

@code {
    private bool isMenuOpen = false;
    [Inject] private IJSRuntime JSRuntime { get; set; }

    protected override Task OnInitializedAsync()
    {
        // Ensure the initial state is correct based on screen size
        isMenuOpen = true; // Default state
        return base.OnInitializedAsync();
    }

    private void ToggleMenu()
    {
        isMenuOpen = !isMenuOpen;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // Add event listener for window resize
            JSRuntime.InvokeVoidAsync("window.addEventListener", "resize", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public void OnResize()
    {
        // Close the menu if screen width is more than 768px
        if (WindowWidth > 768)
        {
            isMenuOpen = false;
        }
    }

    private int WindowWidth => (int)JSRuntime.InvokeAsync<double>("eval", "window.innerWidth").Result;
}   *@